<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Super Professional Dominoes Tracker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #0f172a; /* Slate 900 */
      color: #e2e8f0; /* Slate 200 */
    }
    /* Custom scrollbar for better aesthetics */
    ::-webkit-scrollbar {
        width: 8px;
    }
    ::-webkit-scrollbar-track {
        background: #1e293b; /* Slate 800 */
    }
    ::-webkit-scrollbar-thumb {
        background: #475569; /* Slate 600 */
        border-radius: 4px;
    }
    ::-webkit-scrollbar-thumb:hover {
        background: #64748b; /* Slate 500 */
    }
    .score-summary-tab {
        background-color: #1e293b; /* Slate 800 */
        border-radius: 0.75rem; /* rounded-xl */
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
        padding: 1.5rem; /* p-6 */
        margin-bottom: 1.5rem; /* mb-6 */
        width: 100%;
        max-width: 20rem; /* w-80 */
        position: fixed; /* Keep it fixed */
        top: 20px; /* Adjust top position */
        left: 20px; /* Adjust left position */
        z-index: 40; /* Ensure it's above other content */
        transition: transform 0.3s ease-in-out;
        transform: translateX(-120%); /* Start hidden off-screen */
    }
    .score-summary-tab.active {
        transform: translateX(0); /* Slide in */
    }

    @media (max-width: 768px) {
        .score-summary-tab {
            position: static; /* Remove fixed positioning on smaller screens */
            max-width: none;
            margin-top: 1rem;
            transform: translateX(0); /* Always visible when static */
        }
    }
  </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">

  <!-- Score Summary Tab (smaller tab always visible during match) -->
  <div id="scoreSummaryTab" class="score-summary-tab hidden">
    <h3 class="text-xl font-semibold text-white mb-4">Current Match Scores</h3>
    <div id="currentScores" class="text-slate-300 text-left mb-4">
      <!-- Current scores will be displayed here -->
    </div>
    <div id="winPossibility" class="text-lg font-medium text-center">
      <!-- Pollona/Recula possibility will be displayed here -->
    </div>
  </div>

  <div class="bg-slate-800 p-8 rounded-xl shadow-lg w-full max-w-2xl text-center z-10">
    <h1 class="text-4xl font-bold text-cyan-400 mb-6">Dominoes Master Tracker</h1>

    <!-- Player Selection & Game Start Section -->
    <div id="playerInputSection" class="mb-8 p-6 bg-slate-700 rounded-lg shadow-md">
      <h2 class="text-2xl font-semibold text-white mb-4">Start a New Match</h2>

      <div class="mb-4">
        <label class="block text-slate-300 text-lg mb-2">Game Mode:</label>
        <div class="flex justify-center space-x-4">
          <label class="inline-flex items-center">
            <input type="radio" name="gameMode" value="free-for-all" checked class="form-radio text-cyan-500" onchange="window.toggleGameModeInputs()">
            <span class="ml-2 text-white">Free-for-All</span>
          </label>
          <label class="inline-flex items-center">
            <input type="radio" name="gameMode" value="teams" class="form-radio text-cyan-500" onchange="window.toggleGameModeInputs()">
            <span class="ml-2 text-white">Teams (2 vs 2)</span>
          </label>
        </div>
      </div>

      <div class="mb-4">
        <label for="newPlayerName" class="block text-slate-300 text-lg mb-2">Add New Player:</label>
        <input
          id="newPlayerName"
          type="text"
          placeholder="Enter new player name"
          class="w-full p-3 mb-2 bg-slate-900 text-white border border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-cyan-500"
        />
        <button
          onclick="window.addNewPlayer()"
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out"
        >
          Add Player to Roster
        </button>
      </div>

      <div class="mb-6">
        <label class="block text-slate-300 text-lg mb-2">Select Players for this Match:</label>
        <div id="playerCheckboxes" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 mb-4 p-3 bg-slate-700 rounded-md max-h-48 overflow-y-auto">
          <!-- Player checkboxes will be rendered here -->
        </div>
        <button
          onclick="window.selectAllPlayers()"
          class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md mr-2 transition duration-300 ease-in-out"
        >
          Select All
        </button>
        <button
          onclick="window.clearAllPlayers()"
          class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out"
        >
          Clear All
        </button>
      </div>

      <div id="teamSelection" class="hidden mb-6 p-4 bg-slate-600 rounded-lg">
        <h3 class="text-xl font-semibold text-white mb-3">Assign Teams</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="team1Select" class="block text-slate-300 text-md mb-2">Team 1:</label>
            <select id="team1Select" multiple size="4" class="w-full p-2 bg-slate-900 text-white border border-slate-600 rounded-md focus:outline-none focus:ring-1 focus:ring-cyan-500">
              <!-- Options populated dynamically -->
            </select>
          </div>
          <div>
            <label for="team2Select" class="block text-slate-300 text-md mb-2">Team 2:</label>
            <select id="team2Select" multiple size="4" class="w-full p-2 bg-slate-900 text-white border border-slate-600 rounded-md focus:outline-none focus:ring-1 focus:ring-cyan-500">
              <!-- Options populated dynamically -->
            </select>
          </div>
        </div>
      </div>

      <button
        onclick="window.startDominoes()"
        class="bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105"
      >
        Start Match
      </button>
    </div>

    <!-- Scoring and Status Section -->
    <div id="domScoring" class="hidden">
      <div class="mb-8 p-6 bg-slate-700 rounded-lg shadow-md">
        <h3 class="text-2xl font-semibold text-white mb-4">Enter Round Scores</h3>
        <div id="scoreInputs" class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <!-- Score inputs will be rendered here dynamically -->
        </div>
        <button
          onclick="window.submitDominoesScore()"
          class="bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105"
        >
          Submit Score
        </button>
      </div>

      <!-- Match Status and Standings -->
      <div class="mb-8 p-6 bg-slate-700 rounded-lg shadow-md">
        <h3 class="text-2xl font-semibold text-white mb-4">Overall Player Standings</h3>
        <div id="domStandings" class="overflow-x-auto">
          <!-- Standings table will be rendered here -->
        </div>
        <button
          onclick="window.resetCurrentMatch()"
          class="bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white font-bold py-3 px-6 rounded-lg shadow-md mt-6 transition duration-300 ease-in-out transform hover:scale-105"
        >
          End Current Match
        </button>
      </div>
    </div>
  </div>

  <div id="messageBox" class="hidden fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
    <div class="bg-slate-700 p-8 rounded-lg shadow-xl max-w-sm w-full text-center">
      <p id="messageContent" class="text-white text-lg mb-6"></p>
      <button onclick="window.hideMessageBox()" class="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-2 px-5 rounded-md">
        OK
      </button>
    </div>
  </div>


  <script type="module">
    // Import necessary Firebase modules
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, setDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // Global variables for Firebase and app data
    let db;
    let auth;
    let userId;

    // Current Match Specific Data (reset per game)
    let domPlayers = []; // This will hold the entities being scored in the current match (individual players or 'Team 1', 'Team 2')
    let domScores = {}; // Current match points for domPlayers
    let teamMembers = {}; // Stores individual player names assigned to teams for the current match

    // Global Persistent Data (saved across games)
    let allPlayers = []; // Master list of all unique individual player names ever encountered
    let playerOverallStats = {}; // Overall career stats for each individual player (wins, pollonas, reculas, streak)

    let gameDataDocRef; // Reference to the Firestore document for current match data
    let globalStatsDocRef; // Reference to the Firestore document for global player stats

    let gameMode = 'free-for-all'; // Default game mode

    // --- Firebase Initialization and Data Listeners ---
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

            const app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            if (typeof __initial_auth_token !== 'undefined') {
                await signInWithCustomToken(auth, __initial_auth_token);
            } else {
                await signInAnonymously(auth);
            }

            onAuthStateChanged(auth, (user) => {
                if (user) {
                    userId = user.uid;
                    console.log("User signed in:", userId);
                    gameDataDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/dominoesGameData`, 'currentMatch');
                    globalStatsDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/allPlayersStats`, 'globalStats');
                    listenForGlobalStats(); // Start listening for global stats first
                    listenForGameData(); // Then listen for current game data
                } else {
                    console.log("No user signed in.");
                    userId = crypto.randomUUID(); // Fallback for unauthenticated
                    gameDataDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/dominoesGameData`, 'currentMatch');
                    globalStatsDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/allPlayersStats`, 'globalStats');
                    listenForGlobalStats();
                    listenForGameData();
                }
                document.getElementById('playerInputSection').insertAdjacentHTML('beforeend', `<p class="text-sm text-slate-400 mt-4">Your User ID: <span class="font-mono">${userId}</span></p>`);
            });

        } catch (error) {
            console.error("Error initializing Firebase or authenticating:", error);
            window.showMessageBox("Failed to initialize the app. Please try again later.");
        }
    });

    // Listens for real-time updates to global player stats from Firestore
    function listenForGlobalStats() {
        if (!globalStatsDocRef) {
            console.error("globalStatsDocRef is not initialized.");
            return;
        }

        onSnapshot(globalStatsDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const data = docSnap.data();
                allPlayers = data.allPlayers || [];
                playerOverallStats = data.playerOverallStats || {};
                console.log("Global stats updated from Firestore:", data);
            } else {
                console.log("No global player stats found in Firestore. Starting fresh.");
                allPlayers = [];
                playerOverallStats = {};
            }
            renderPlayerCheckboxes(); // Always re-render checkboxes when allPlayers updates
            updateDomStandings(); // Update standings when global stats change
        }, (error) => {
            console.error("Error listening for global stats:", error);
            window.showMessageBox("Error loading global player data: " + error.message);
        });
    }

    // Listens for real-time updates to current game data from Firestore
    function listenForGameData() {
        if (!gameDataDocRef) {
            console.error("gameDataDocRef is not initialized.");
            return;
        }

        onSnapshot(gameDataDocRef, (docSnap) => {
            if (docSnap.exists()) {
                const data = docSnap.data();
                domPlayers = data.players || [];
                domScores = data.scores || {};
                gameMode = data.gameMode || 'free-for-all';
                teamMembers = data.teamMembers || {};

                console.log("Current game data updated from Firestore:", data);

                document.querySelector(`input[name="gameMode"][value="${gameMode}"]`).checked = true;
                window.toggleGameModeInputs(); // Ensure correct inputs are shown

                if (domPlayers.length > 0) {
                    document.getElementById("domScoring").classList.remove("hidden");
                    document.getElementById("scoreSummaryTab").classList.add("active");
                    renderDominoesInputs();
                    updateCurrentScoreSummary();
                    // Do not update domStandings here, as listenForGlobalStats already handles it
                } else {
                    document.getElementById("domScoring").classList.add("hidden");
                    document.getElementById("scoreSummaryTab").classList.remove("active");
                    // Clear inputs and checkboxes when no game is active
                    document.getElementById("newPlayerName").value = '';
                    renderPlayerCheckboxes(); // Uncheck all
                    document.getElementById("scoreInputs").innerHTML = '';
                    // Do not reset playerOverallStats here, as they are persistent
                }
            } else {
                console.log("No current game data found in Firestore.");
                document.getElementById("domScoring").classList.add("hidden");
                document.getElementById("scoreSummaryTab").classList.remove("active");
                document.getElementById("newPlayerName").value = '';
                renderPlayerCheckboxes(); // Uncheck all
                document.getElementById("scoreInputs").innerHTML = '';
            }
        }, (error) => {
            console.error("Error listening for current game data:", error);
            window.showMessageBox("Error loading current game data: " + error.message);
        });
    }

    // Saves the current game state to Firestore
    async function saveCurrentGameData() {
        if (!gameDataDocRef) {
            console.error("gameDataDocRef is not initialized, cannot save current game data.");
            window.showMessageBox("App not ready, please try again.");
            return;
        }
        try {
            await setDoc(gameDataDocRef, {
                players: domPlayers,
                scores: domScores,
                gameMode: gameMode,
                teamMembers: teamMembers
            });
            console.log("Current game data saved to Firestore.");
        }
        catch (e) {
            console.error("Error saving current game document: ", e);
            window.showMessageBox("Error saving current game data: " + e.message);
        }
    }

    // Saves global player stats to Firestore
    async function saveGlobalStats() {
        if (!globalStatsDocRef) {
            console.error("globalStatsDocRef is not initialized, cannot save global stats.");
            window.showMessageBox("App not ready, please try again.");
            return;
        }
        try {
            await setDoc(globalStatsDocRef, {
                allPlayers: allPlayers,
                playerOverallStats: playerOverallStats
            });
            console.log("Global player stats saved to Firestore.");
        }
        catch (e) {
            console.error("Error saving global stats document: ", e);
            window.showMessageBox("Error saving global player stats: " + e.message);
        }
    }


    // --- UI Utility Functions ---

    // Function to show a custom message box
    function showMessageBox(message) {
      const messageBox = document.getElementById("messageBox");
      const messageContent = document.getElementById("messageContent");
      messageContent.textContent = message;
      messageBox.classList.remove("hidden");
    }
    window.showMessageBox = showMessageBox;


    // Function to hide the custom message box
    function hideMessageBox() {
      document.getElementById("messageBox").classList.add("hidden");
    }
    window.hideMessageBox = hideMessageBox;

    // Simple confirm dialog replacement (since alert/confirm are blocked in iframe)
    async function confirm(message) {
        return new Promise((resolve) => {
            const messageBox = document.getElementById("messageBox");
            const messageContent = document.getElementById("messageContent");
            messageContent.textContent = message;

            const existingCancelButton = messageBox.querySelector('.ml-4');
            if (existingCancelButton) {
                existingCancelButton.remove();
            }

            const okButton = messageBox.querySelector('button');
            okButton.textContent = 'Yes';
            const cancelButton = document.createElement('button');
            cancelButton.textContent = 'No';
            cancelButton.className = 'ml-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-5 rounded-md';
            cancelButton.onclick = () => {
                messageBox.classList.add('hidden');
                cancelButton.remove();
                resolve(false);
            };

            okButton.onclick = () => {
                messageBox.classList.add('hidden');
                cancelButton.remove();
                resolve(true);
            };

            messageBox.appendChild(cancelButton);
            messageBox.classList.remove('hidden');
        });
    }
    window.confirm = confirm;


    // --- Player Management & Game Setup ---

    // Function to toggle input fields based on game mode selection
    function toggleGameModeInputs() {
        gameMode = document.querySelector('input[name="gameMode"]:checked').value;
        const teamSelectionDiv = document.getElementById('teamSelection');
        if (gameMode === 'teams') {
            teamSelectionDiv.classList.remove('hidden');
            populateTeamSelects();
        } else {
            teamSelectionDiv.classList.add('hidden');
        }
    }
    window.toggleGameModeInputs = toggleGameModeInputs;

    // Adds a new player to the global roster
    async function addNewPlayer() {
        const newPlayerInput = document.getElementById('newPlayerName');
        const playerName = newPlayerInput.value.trim();

        if (playerName === "") {
            window.showMessageBox("Please enter a player name.");
            return;
        }
        if (allPlayers.includes(playerName)) {
            window.showMessageBox(`Player "${playerName}" already exists.`);
            newPlayerInput.value = '';
            return;
        }

        allPlayers.push(playerName);
        playerOverallStats[playerName] = { wins: 0, pollona: 0, recula: 0, streak: 0 };
        newPlayerInput.value = '';
        renderPlayerCheckboxes();
        await saveGlobalStats();
        window.showMessageBox(`Player "${playerName}" added to roster!`);
    }
    window.addNewPlayer = addNewPlayer;

    // Renders checkboxes for player selection
    function renderPlayerCheckboxes() {
        const container = document.getElementById('playerCheckboxes');
        container.innerHTML = ''; // Clear existing checkboxes

        if (allPlayers.length === 0) {
            container.innerHTML = '<p class="text-slate-400">No players added yet. Add new players above!</p>';
            return;
        }

        allPlayers.forEach(player => {
            const div = document.createElement('div');
            div.className = 'flex items-center';
            div.innerHTML = `
                <input type="checkbox" id="player-<span class="math-inline">\{player\}" value\="</span>{player}" class="form-checkbox text-cyan-500 rounded-md">
                <label for="player-<span class="math-inline">\{player\}" class\="ml\-2 text\-white text\-sm"\></span>{player}</label>
            `;
            container.appendChild(div);
        });
        populateTeamSelects(); // Update team dropdowns whenever checkboxes change
    }

    // Selects all player checkboxes
    function selectAllPlayers() {
        document.querySelectorAll('#playerCheckboxes input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = true;
        });
        populateTeamSelects();
    }
    window.selectAllPlayers = selectAllPlayers;

    // Clears all player checkboxes
    function clearAllPlayers() {
        document.querySelectorAll('#playerCheckboxes input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
        });
        populateTeamSelects();
    }
    window.clearAllPlayers = clearAllPlayers;

    // Populates the team selection dropdowns with currently selected players
    function populateTeamSelects() {
        const selectedPlayers = Array.from(document.querySelectorAll('#playerCheckboxes input[type="checkbox"]:checked'))
                                     .map(cb => cb.value);

        const team1Select = document.getElementById('team1Select');
        const team2Select = document.getElementById('team2Select');

        // Clear previous options
        team1Select.innerHTML = '';
        team2Select.innerHTML = '';

        selectedPlayers.forEach(player => {
            const opt1 = document.createElement('option');
            opt1.value = player;
            opt1.textContent = player;
            team1Select.appendChild(opt1);

            const opt2 = document.createElement('option');
            opt2.value = player;
            opt2.textContent = player;
            team2Select.appendChild(opt2);
        });
    }


    // Starts a new dominoes match based on selected game mode and players
    async function startDominoes() {
      gameMode = document.querySelector('input[name="gameMode"]:checked').value;
      domScores = {}; // Reset current match scores
      teamMembers = {}; // Reset team members for the current match

      let selectedPlayers = Array.from(document.querySelectorAll('#playerCheckboxes input[type="checkbox"]:checked'))
                               .map(cb => cb.value);

      if (gameMode === 'free-for-all') {
          if (selectedPlayers.length < 2) {
              window.showMessageBox("Please select at least 2 players for Free-for-All mode.");
              return;
          }
          domPlayers = selectedPlayers; // domPlayers are the individual players
      } else if (gameMode === 'teams') {
          const team1Selected = Array.from(document.getElementById('team1Select').selectedOptions).map(opt => opt.value);
          const team2Selected = Array.from(document.getElementById('team2Select').selectedOptions).map(opt => opt.value);

          if (team1Selected.length === 0 || team2Selected.length === 0) {
              window.showMessageBox("Please select players for both Team 1 and Team 2.");
              return;
          }
          if (team1Selected.some(p => team2Selected.includes(p)) || team2Selected.some(p => team1Selected.includes(p))) {
              window.showMessageBox("Players cannot be on more than one team.");
              return;
          }
          if (team1Selected.length + team2Selected.length !== selectedPlayers.length) {
              window.showMessageBox("All selected players must be assigned to a team.");
              return;
          }

          domPlayers = ['Team 1', 'Team 2']; // domPlayers are the teams
          teamMembers = {
              'Team 1': team1Selected,
              'Team 2': team2Selected
          };
      }

      // Initialize current match scores for domPlayers
      domPlayers.forEach(p => {
        domScores[p] = { points: 0, wins: 0, pollona: 0, recula: 0, streak: 0 };
      });

      document.getElementById("domScoring").classList.remove("hidden");
      document.getElementById("scoreSummaryTab").classList.add("active");
      renderDominoesInputs();
      updateCurrentScoreSummary();
      await saveCurrentGameData(); // Save initial current game state
    }
    window.startDominoes = startDominoes;


    // Renders input fields for each player/team in the current match
    function renderDominoesInputs() {
      const container = document.getElementById("scoreInputs");
      container.innerHTML = "";
      domPlayers.forEach(p => {
        const inputDiv = document.createElement("div");
        inputDiv.className = "flex flex-col items-start";
        const displayName = gameMode === 'teams' ? `<span class="math-inline">\{p\} \(</span>{teamMembers[p].join(', ')})` : p;
        inputDiv.innerHTML = `
          <label for="score-<span class="math-inline">\{p\}" class\="text\-slate\-300 text\-md mb\-1"\></span>{displayName}:</label>
          <input
            type="number"
            id="score-${p}"
            min="0"
            value="0"
            class="w-full p-2 bg-slate-900 text-white border border-slate-600 rounded-md focus:outline-none focus:ring-1 focus:ring-cyan-500"
            oninput="window.updateCurrentScoreSummary()"
          />
        `;
        container.appendChild(inputDiv);
      });
    }

    // --- Scoring Logic ---

    // Submits the scores for the current round and updates standings
    async function submitDominoesScore() {
      let currentRoundScores = {};
      let allInputsValid = true;

      // Store points before this round for Recula comeback check
      let pointsBeforeRound = {};
      domPlayers.forEach(p => {
          pointsBeforeRound[p] = domScores[p].points;
      });

      domPlayers.forEach(p => {
        const inputElement = document.getElementById("score-" + p);
        const val = parseInt(inputElement.value);
        if (isNaN(val) || val < 0) {
            window.showMessageBox(`Please enter a valid positive number for ${gameMode === 'teams' ? p : p}'s score.`);
            allInputsValid = false;
            return;
        }
        currentRoundScores[p] = val;
        domScores[p].points += val; // Add to cumulative points for the current match
      });

      if (!allInputsValid) {
          return;
      }

      let winnerOfGame = null;
      domPlayers.forEach(p => {
          if (domScores[p].points >= 150) {
              if (winnerOfGame === null || domScores[p].points > domScores[winnerOfGame].points) {
                  winnerOfGame = p;
              }
          }
      });

      if (winnerOfGame) {
          // Identify the individual players who won the game
          let winningIndividualPlayers = [];
          if (gameMode === 'teams') {
              winningIndividualPlayers = teamMembers[winnerOfGame];
          } else { // Free-for-all
              winningIndividualPlayers = [winnerOfGame];
          }

          // Identify all individual players who LOST this game
          let losingIndividualPlayers = [];
          if (gameMode === 'teams') {
              domPlayers.filter(p => p !== winnerOfGame).forEach(losingTeam => {
                  losingIndividualPlayers = losingIndividualPlayers.concat(teamMembers[losingTeam]);
              });
          } else { // Free-for-all
              losingIndividualPlayers = domPlayers.filter(p => p !== winnerOfGame);
          }

          // Determine win type for winner(s) based on current match scores
          let losersInCurrentMatch = domPlayers.filter(p => p !== winnerOfGame);
          let losersFinalScoresInCurrentMatch = losersInCurrentMatch.map(p => domScores[p].points);

          const allLosersZero = losersFinalScoresInCurrentMatch.every(score => score === 0);

          let isRecula = false;
          // Recula check: Winner's score before this round was < 100, AND a loser reached 100+ final points.
          if (pointsBeforeRound[winnerOfGame] < 100) {
              for (const loserScore of losersFinalScoresInCurrentMatch) {
                  if (loserScore >= 100) {
                      isRecula = true;
                      break;
                  }
              }
          }

          // Update overall stats for winning individual players
          winningIndividualPlayers.forEach(player => {
              if (!playerOverallStats[player]) { // Should ideally exist, but safety check
                  playerOverallStats[player] = { wins: 0, pollona: 0, recula: 0, streak: 0 };
              }

              if (allLosersZero) {
                  playerOverallStats[player].pollona++;
                  playerOverallStats[player].wins += 2;
                  window.showMessageBox(`${winnerOfGame} (including ${player}) won by Pollona! (+2 Wins)`);
              } else if (isRecula) {
                  playerOverallStats[player].recula++;
                  playerOverallStats[player].wins += 3;
                  window.showMessageBox(`${winnerOfGame} (including ${player}) won by Recula! (+3 Wins - A great comeback!)`);
              } else {
                  playerOverallStats[player].wins++;
                  window.showMessageBox(`${winnerOfGame} (including ${player}) won the game! (+1 Win)`);
              }
              playerOverallStats[player].streak++;
          });

          // Reset streak for all individual losing players
          losingIndividualPlayers.forEach(player => {
              if (playerOverallStats[player]) {
                  playerOverallStats[player].streak = 0;
              }
          });


          // Reset current match points for all domPlayers (teams or individuals) for new game
          domPlayers.forEach(p => {
              domScores[p].points = 0;
          });

          await saveGlobalStats(); // Save updated overall player stats
      } else {
          window.showMessageBox("Round submitted. Game continues!");
      }

      // Reset input fields to 0 for the next round
      domPlayers.forEach(p => {
          document.getElementById("score-" + p).value = "0";
      });

      updateDomStandings(); // Re-render standings based on overall player stats
      updateCurrentScoreSummary(); // Update for summary tab after score submission
      await saveCurrentGameData(); // Save updated current match state
    }
    window.submitDominoesScore = submitDominoesScore;


    // Updates the current score summary tab with points and win possibility
    function updateCurrentScoreSummary() {
        const currentScoresDiv = document.getElementById('currentScores');
        const winPossibilityDiv = document.getElementById('winPossibility');
        let scoresHtml = '';
        let possibilityMessage = '';

        if (domPlayers.length === 0) {
            currentScoresDiv.innerHTML = '<p>No match in progress.</p>';
            winPossibilityDiv.innerHTML = '';
            return;
        }

        let leadingPlayerInRound = null;
        let maxCombinedPoints = -1;

        // Calculate combined scores and find leader for this round
        const currentCombinedScores = {};
        domPlayers.forEach(p => {
            const currentPointsInput = parseInt(document.getElementById(`score-${p}`).value) || 0;
            currentCombinedScores[p] = domScores[p].points + currentPointsInput;

            if (currentCombinedScores[p] > maxCombinedPoints) {
                maxCombinedPoints = currentCombinedScores[p];
                leadingPlayerInRound = p;
            }
            const displayName = gameMode === 'teams' ? `${p}:` : p;
            scoresHtml += `<p class="flex justify-between"><span><span class="math-inline">\{displayName\}</span\> <span class\="font\-bold"\></span>{currentCombinedScores[p]}</span></p>`;
        });
        currentScoresDiv.innerHTML = scores
